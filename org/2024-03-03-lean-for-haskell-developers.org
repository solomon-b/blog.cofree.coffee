#+AUTHOR: Solomon Bothwell
#+title: Lean For Haskell Developers

*Last updated 2024-03-03*

[[https://lean-lang.org/][Lean]] is starting to look like a great option for functional programming. It has
been heavily adopted by the mathematics community but no so much by the
Functional Programming community. This means that there is not yet much library
support day to application development, but the bones of the language look
really nice for FP.
 
Its a pure FP language with monadic effects, ~do~ notation, typeclasses, and
dependent types, quotient types, a powerful macro system, a ~C~ FFI, and from
what I understand it is very fast.

At this point I wouldn't recommend it for production work outside of theorem
proving, but given some time that could change.

In my own personal interest I have created this minimal guide for Haskell
developers learning Lean. This article is not at all intended to replace any of
the much more substantial documentation generated by the Lean community (and
listed at the end of this article). Rather, this is just a quick FAQ for common
questions a Haskell developer will have when starting to learn
Lean. Contributions would be greatly appreciated [[https://github.com/solomon-b/blog.cofree.coffee/issues][here]].

** Installer
[[https://github.com/leanprover/elan][Elan]] is Lean's equivalent to GHCUp. It automatically puts lean and lake files in
your build path. Versions can be pinned via the ~lean-toolchain~ file.

Elan is recommended even on Nixos systems and seems to integrate fairly well.
** Build System
[[https://github.com/leanprover/lean4/tree/master/src/lake][Lake]] is the standard build system. You can initialize a new project with:

#+begin_src bash
mkdir hello
cd hello
lake init hello
#+end_src

Dependencies and build targets are managed via ~lakefile.lean~.
** Basic Syntax
Note, most of these examples were taken from [[https://lean-lang.org/functional_programming_in_lean][Functional Programming in Lean]]
which is a much more complete introduction to the language.
**** eval
You can drop the ~#eval~ meta command anywhere in your code:
#+begin_src lean
#eval 1 + 2
#+end_src
This can be triggered via LSP mode or the lean compiler directly.
**** Functions
Terms are defined using the ~def~ keyword:
#+begin_src lean
def hello := "Hello"
#+end_src
The type of a term can be ascribed:
#+begin_src lean
def lean : String := "Lean"
#+end_src

The basic way to define functions is by adding parameters (with or without
ascriptions) to a ~def~ statement:
#+begin_src lean
def add1 (n : Nat) : Nat := n + 1
#+end_src

Lambdas are 
**** Type Aliases
Because types are first class, we can define type aliases as ordinary terms:
#+begin_src lean
def Str : Type := String
def aStr : Str := "This is a string."
#+end_src
**** Record Types
#+begin_src lean
structure Point where
  x : Float
  y : Float
deriving Repr

def origin : Point := { x := 0.0, y := 0.0 }
#+end_src
**** Recursive and Sum Types
Both are declared with the ~inductive~ keyword:
#+begin_src lean
inductive List (α : Type u) where
  | nil : List α
  | cons (head : α) (tail : List α) : List α

inductive Bool where
  | false : Bool
  | true : Bool
#+end_src

GADTs can also be done using ~inductive~ statements.
#+begin_src haskell
data Expr a where
  Lit :: Int -> Expr Int
  Str :: String -> Expr String
  Add :: Expr Int -> Expr Int -> Expr Int
#+end_src

Becomes:
#+begin_src lean
inductive Expr : Type → Type
  | lit : Int → Expr Int
  | str : String → Expr String
  | add : Expr Int → Expr Int → Expr Int
#+end_src

Lean distinguishes between "normal" and "index" parameters. Normal parameters
must always be given first. Once an index parameter is introduced, all
subsequent paremeters are assumed to be indices as well. This means we have to
put the nat index on a Vec after the ~α~ param:
#+begin_src lean
inductive Vec : Type u → Nat → Type u where
  | vnil : Vec α 0
  | vcons (head : α) (tail : Vec α n) : Vec α (Nat.succ n)
#+end_src
More details found [[https://lean-lang.org/functional_programming_in_lean/dependent-types/indices-parameters-universes.html][here]].
**** Pattern Matching
~case~ statements are called ~match~ statments:
#+begin_src lean
  def isZero (n : Nat) : Bool :=
    match n with
    | Nat.zero => true
    | Nat.succ k => false
#+end_src

**** Polymorphism
#+begin_src 
structure PPoint (α : Type) where
  x : α
  y : α
deriving Repr
#+end_src
**** Sigma and Pi?
Lean is a dependently typed language which means it has Sigma and Pi types. Explaining what that means is out of the
scope of this FAQ. [[https://lean-lang.org/theorem_proving_in_lean4/dependent_type_theory.html][Here]] is a more detailed article.


For reference here is their syntax to build a dependent pair
#+begin_src lean
def f (α : Type u) (β : α → Type v) (a : α) (b : β a) : (a : α) × β a :=
  ⟨a, b⟩
#+end_src
** Hoogle?
Lean has [[https://loogle.lean-lang.org/][loogle]] which does not appear work as well as Hoogle but I think that
is inevitable given that dependent types can require computation during typechecking.

** Effects? IO
Lean has [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Monad][Monads]]! Lean is a pure functional language with monadic effects and
~do~ notation:

#+begin_src lean
  do a ← s,
   b ← t,
   f a b,
   return (g a b)
#+end_src

** Functor/Applicative/Monad/Traversable etc?
Lean has a very similar typeclass hierarchy in the prelude:
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Functor][Init.Prelude.Functor]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Applicative][Init.Prelude.Applicative]] 
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Control/Basic.html#Alternative][Init.Control.Basic.Alternative]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Monad][Init.Prelude.Monad]] 

Note that some common classes need to be found in ~Mathlib~. Classes requiring
proofs are noted.
- [[https://leanprover-community.github.io/mathlib4_docs/Mathlib/Control/Bifunctor.html#Bifunctor][Mathlib.Control.Bifunctor.Bifunctor]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Control/Basic.html#MonadControl][Init.Control.Basic.MonadControl]] (MonadBaseControl)
- [[https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Defs.html#Semigroup][Mathlib.Algebra.Group.Defs.Semigroup]] (requires proof)
- [[https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Defs.html#Monoid][Mathlib.Algebra.Group.Defs.Monoid]] (requires proof)
- [[https://leanprover-community.github.io/mathlib4_docs/Mathlib/Control/Traversable/Basic.html#Traversable][Mathlib.Control.Traversable.Basic.Traversable]] 
- [[https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category][Mathlib.CategoryTheory.Category.Basic.Category]] (requires proofs)

**** Notably Absent
- ~Foldable~ has been folded into ~Traversable~.
- ~Profunctor~ but should be recoverable using [[https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Functor/Basic.html][CategoryTheory.Functor]] from
  ~Mathlib~ (requires proofs).
** Common Types
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Unit][Unit]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#List][Init.Prelude.List]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Control/Id.html#Id][Init.Control.Id]] (Identity)
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Control/Reader.html][Init.Control.Reader]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/System/IO.html#IO][Init.System.IO]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Control/State.html][Init.Control.State]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Control/Option.html][Init.Control.Option]] (Maybe)
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Except][Init.Prelude.Except]] (Either)
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Sum][Init.Core.Sum]]
- [[https://leanprover-community.github.io/mathlib4_docs/Std/Data/HashMap/Basic.html#Std.HashMap][Std.Data.HashMap.Basic.HashMap]] 
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Array][Init.Prelude.Array]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#String][Init.Prelude.String]] 
  [[https://leanprover-community.github.io/mathlib4_docs/Init/Data/String/Basic.html][Init.Data.String.Basic]]
  [[https://leanprover-community.github.io/mathlib4_docs/Init/Data/String/Extra.html][Init.Data.String.Extra]]
** Common Tools/Libaries
**** JSON Serialization
Aeson style typeclasses can be found in mathlib:

- [[https://leanprover-community.github.io/mathlib4_docs/Lean/Data/Json/FromToJson.html#Lean.FromJson][Lean.Data.Json.FromToJson.FromJSON]]
- [[https://leanprover-community.github.io/mathlib4_docs/Lean/Data/Json/FromToJson.html#Lean.ToJson][Lean.Data.Json.FromToJson.ToJSON]]
**** Web Servers/Clients/TLS/JOSE/JWT
To my knowledge nothing exists yet.
**** Parsing
Lean uses a non-monadic recursive descent parser:
https://leanprover-community.github.io/mathlib4_docs/Lean/Parser/Basic.html

To my knowledge no parser generator or parser combinator libraries exist yet.
**** Database Clients
To my knowledge nothing exists yet.
**** File Handling, FilePaths, Directories, and Environment
This stuff is all mixed togther in the following modules:
- [[https://leanprover-community.github.io/mathlib4_docs/Init/System/IO.html][Init.System.IO]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/System/FilePath.html#System.FilePath][Init.System.FilePath]]
**** IORefs/Mutation/Concurrency
- [[https://leanprover-community.github.io/mathlib4_docs/Init/System/Mutex.html#IO.Mutex][IO.Mutex]] Similar to an IO Ref.
- [[https://leanprover-community.github.io/mathlib4_docs/Init/System/Promise.html][IO.Promise]]
- [[https://leanprover-community.github.io/mathlib4_docs/Init/Data/Channel.html#IO.Channel][Init.Data.Channel]]
**** ST/STM
** Package Registry?
- https://reservoir.lean-lang.org/
** Where can I learn more?
- https://reservoir.lean-lang.org/
- https://leanprover-community.github.io/
- https://lean-lang.org/lean4/doc/
- https://lean-lang.org/functional_programming_in_lean/
- https://leanprover.github.io/theorem_proving_in_lean4/
