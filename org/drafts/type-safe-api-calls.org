#+AUTHOR: Solomon Bothwell
#+TITLE: Type Safe API Calls

Working with JSON data in Haskell can be a mixed bag. If your JSON
data is consistent then it is easy enough to write ~FromJSON~ and
~ToJSON~ instances to produce some concrete types. However, sometimes
your API is not so consistent.

I contribute to Haskell a library for the [[https://spec.matrix.org/latest/][Matrix Client-Server
API]]. The Matrix Protocol has some interesting design decisions. For
example, individual rooms contain a Key/Value store called the Room
State in which you can store arbitrary JSON data. This allows for all
sorts of applications to be build ontop of the Matrix Protocol.

I wanted to write a function for querying the ~Room State~ using [[https://spec.matrix.org/v1.2/client-server-api/#get_matrixclientv3roomsroomidstateeventtypestatekey][this]]
HTTP endpoint. The endpoint takes a ~RoomID~, an ~Event Type~, and a
~State Key~. Keys in the Room State Key/Value Store are a product
of ~Event Type~ and ~State Key~.

Any arbitrary data can be stored in the ~Room State~, but there is
also a number of ~Event Types~ defined in the Matrix spec with their
own included schemas. For example event types ~m.room.topic~,
~m.room.name~, and ~m.room_power_levels~. Each of these returns a
particular shape of JSON data.

I want to write a Haskkell function for fetching ~Room State~. I have
a set of known keys and the particular shape of JSON data they
return. I can describe this using sum type:

#+begin_src haskell
  data StateContent =
      ScRoomCreate MRCreate
    | ScRoomMember MRMember
    | ScRoomPowerLevels MRPowerLevels
    | ScRoomJoinRules MRJoinRules
    | ScRoomCanonicalAlias MRCanonicalAlias
    | ScRoomGuestAccess MRGuestAccess
    | ScRoomHistoryVisibility MRHistoryVisibility
    | ScRoomName MRName
    | ScRoomTopic MRTopic
    | ScOther Value
#+end_src

Inside each branch of the sum type is a record type with appropriate
aeson instances for the expected payload. I also include a catch-all
constructor for handling any unknown payloads as a ~Value~ to be
decoded downstream. 

now we can write our api call. In the interest of brevity I drop the
~StateKey~ and treat the API as indexing off the ~EventType~ alone.

#+begin_src haskell
  newtype RoomID = RoomID Text
  newtype EventType = EventType Text

  getRoomStateContent :: ClientSession -> RoomID -> EventType -> Either MatrixError StateContent
#+end_src

This totally works. However it kinda sucks.

Every time we pattern match on ~StateContent~ we will have to handle
all of its cases. When we make the call to ~getRoomStateContent~ we
provide the ~EventType~. We know exactly which response schema to
expect and consequently which data constructor from ~StateContent~ we
need to handle. If we can convince GHC of what we already know, then
we can eliminate all of the case matching.

Our trick is to define ~StateContent~ and ~EventTypeTag~ as GADTs which
are both parameterized by a promoted type representing the key. The
~EventTypeTag~ GADT is essentially a term level representation of our
promoted ~EventType~ which we will use to tell the compiler what field
of ~StateContent~ it is possible to construct.

#+begin_src haskell
  data EventType
   = Create
   | Member
   | PowerLevels
   | JoinRules
   | CanonicalAlias
   | GuestAccess
   | HistoryVisibility
   | Name
   | Topic
   | Other

  data StateContent et where
    ScRoomCreate :: MRCreate -> StateContent 'Create
    ScRoomMember :: MRMember -> StateContent 'Member
    ScRoomPowerLevels :: MRPowerLevels -> StateContent 'PowerLevels
    ScRoomJoinRules :: MRJoinRules -> StateContent 'JoinRules
    ScRoomCanonicalAlias :: MRCanonicalAlias -> StateContent 'CanonicalAlias
    ScRoomGuestAccess :: MRGuestAccess -> StateContent 'GuestAccess
    ScRoomHistoryVisibility :: MRHistoryVisibility -> StateContent 'HistoryVisibility
    ScRoomName :: MRName -> StateContent 'Name
    ScRoomTopic :: MRTopic -> StateContent 'Topic
    ScOther :: Value -> StateContent 'Other

  data EventTypeTag et where
    CreateType            :: EventTypeTag 'Create
    MemberType            :: EventTypeTag 'Member
    PowerLevelsType       :: EventTypeTag 'PowerLevels
    JoinRulesType         :: EventTypeTag 'JoinRules
    CanonicalAliasType    :: EventTypeTag 'CanonicalAlias
    GuestAccessType       :: EventTypeTag 'GuestAccess
    HistoryVisibilityType :: EventTypeTag 'HistoryVisibility
    NameType              :: EventTypeTag 'Name
    TopicType             :: EventTypeTag 'Topic
    OtherType             :: T.Text -> EventTypeTag 'Other
#+end_src

NOTE: Be sure to keep enabling pragma's until GHC stops yelling at you. :)

Notice that there is a 1:1:1 correspondance between the constructors
of our promoted type ~EventType~ and our two GADTs.

This tells us two things about our GADTs:
1. For any given specialization of ~et~ there is only one possible
   data constructor that can be produced.
2. ~et~ can only be specialized to one of the promoted types from
   ~EventType~.

What this means is that if we write a function that takes an
~EventTypeTag~ term and produces a ~StateContent~ where they are
parameterized by the same ~et~, we can always know what constructor of
~StateContent~ can be produced from the result:

#+begin_src haskell
  getRoomStateContent :: FromJSON (StateContent et) => ClientSession -> RoomID -> EventTypeTag et -> Either MatrixError (StateContent et)
#+end_src

The big trick here is that we have unique terms of ~EventTypeTag~ for
each ~EventType~ which we can use to infer the type of ~StateContent~
and thus its valid data constructor.

One thing to note is that we needed to add a ~FromJSON (StateContent
et)~ constraint to our function. This seems odd because ~StateContent~
is an enumerated type with concrete types for ~et~ in all
cases. However technically ~StateContent et~ is technically
polymorphic and so GHC needs some evidence that all possible cases
have a ~FromJSON~ instance.

Unfortunately, this also means we have to breakup our ~FromJSON~ based on the
specialization of ~et~:

#+begin_src haskell
  instance FromJSON (StateContent Name) where
    parseJSON = ScRoomName <$> parseJSON

  instance FromJSON (StateContent Topic) where
    parseJSON = ScTopic <$> parseJSON

  instance FromJSON (StateContent Other) where
    parseJSON = ScOther <$> parsejson

  -- And so on...
#+end_src

However, having gotten through the boilerplate, GHC now knows exactly
which constructor from ~StateContent~ /must/ be returned allowing us
to omit the extra cases!
